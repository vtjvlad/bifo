const mongoose = require('mongoose');
const Product = require('./models/Product');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectToDatabase() {
    try {
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/bifo', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        process.exit(1);
    }
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π
async function testCreateProduct() {
    try {
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞...');
        
        const testProduct = new Product({
            id: 999999,
            title: "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
            date: "2024-01-01",
            vendor: {
                title: "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å",
                __typename: "Vendor"
            },
            section: {
                _id: 999,
                productCategoryName: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                category: "bt-test-category",
                subCategory: "test-subcategory",
                __typename: "Section"
            },
            isPromo: false,
            toOfficial: false,
            promoBid: null,
            lineName: "–¢–µ—Å—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞",
            linePathNew: "/test/line/",
            imagesCount: 1,
            videosCount: 0,
            techShortSpecifications: ["–¢–µ—Å—Ç–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"],
            techShortSpecificationsList: [
                { key: "–¢–µ—Å—Ç", value: "–ó–Ω–∞—á–µ–Ω–∏–µ" }
            ],
            reviewsCount: 0,
            questionsCount: 0,
            url: "/test/product/",
            imageLinks: [
                {
                    thumb: "https://via.placeholder.com/150x150",
                    basic: "https://via.placeholder.com/300x300",
                    small: "https://via.placeholder.com/200x200",
                    big: "https://via.placeholder.com/600x600"
                }
            ],
            minPrice: 1000,
            maxPrice: 1500,
            currentPrice: 1200,
            initPrice: 1500,
            salesCount: 0,
            isNew: 0,
            colorsProduct: [],
            offerCount: 5,
            offers: [],
            madeInUkraine: false,
            userSubscribed: false,
            __typename: "Product"
        });

        const savedProduct = await testProduct.save();
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', savedProduct.title);
        console.log('   ID:', savedProduct.id);
        console.log('   MongoDB _id:', savedProduct._id);
        console.log('   –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', savedProduct.section.category);
        console.log('   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:', savedProduct.section.subCategory);
        console.log('   –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ catalogName:', savedProduct.catalogName);
        console.log('   –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ categoryName:', savedProduct.categoryName);
        
        return savedProduct;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
async function testFindProduct(productId) {
    try {
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞...');
        
        const product = await Product.findOne({ id: productId });
        if (product) {
            console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω:', product.title);
            console.log('   –¶–µ–Ω–∞:', product.currentPrice, '–≥—Ä–Ω');
            console.log('   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:', product.vendor.title);
            console.log('   –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', product.section.productCategoryName);
            console.log('   –ö–∞—Ç–∞–ª–æ–≥:', product.section.category);
            console.log('   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:', product.section.subCategory);
            return product;
        } else {
            console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
async function testCategorySearch() {
    try {
        console.log('\nüìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...');
        
        // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryProducts = await Product.find({ 
            'section.category': { $regex: 'bt-smartphones', $options: 'i' } 
        }).limit(3);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categoryProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ bt-smartphones:`);
        categoryProducts.forEach(product => {
            console.log(`   - ${product.title} (${product.section.subCategory})`);
        });
        
        // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const subCategoryProducts = await Product.find({ 
            'section.subCategory': { $regex: 'iphone', $options: 'i' } 
        }).limit(3);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${subCategoryProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ iphone:`);
        subCategoryProducts.forEach(product => {
            console.log(`   - ${product.title} (${product.section.category})`);
        });
        
        return { categoryProducts, subCategoryProducts };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
async function testCategoryAggregation() {
    try {
        console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...');
        
        const stats = await Product.aggregate([
            {
                $group: {
                    _id: {
                        category: '$section.category',
                        subCategory: '$section.subCategory'
                    },
                    count: { $sum: 1 },
                    avgPrice: { $avg: '$currentPrice' }
                }
            },
            {
                $group: {
                    _id: '$_id.category',
                    subCategories: {
                        $push: {
                            subCategory: '$_id.subCategory',
                            count: '$count',
                            avgPrice: '$avgPrice'
                        }
                    },
                    totalCount: { $sum: '$count' }
                }
            },
            { $sort: { totalCount: -1 } }
        ]);
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        stats.forEach(stat => {
            console.log(`   ${stat._id}: ${stat.totalCount} —Ç–æ–≤–∞—Ä–æ–≤`);
            stat.subCategories.forEach(sub => {
                console.log(`     - ${sub.subCategory}: ${sub.count} —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(sub.avgPrice)} –≥—Ä–Ω`);
            });
        });
        
        return stats;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async function testUpdateProduct(productId) {
    try {
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞...');
        
        const updatedProduct = await Product.findOneAndUpdate(
            { id: productId },
            { 
                $set: { 
                    currentPrice: 1100,
                    isPromo: true 
                },
                $inc: { salesCount: 1 }
            },
            { new: true }
        );
        
        if (updatedProduct) {
            console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedProduct.title);
            console.log('   –ù–æ–≤–∞—è —Ü–µ–Ω–∞:', updatedProduct.currentPrice, '–≥—Ä–Ω');
            console.log('   –ü—Ä–æ–º–æ:', updatedProduct.isPromo);
            console.log('   –ü—Ä–æ–¥–∞–∂–∏:', updatedProduct.salesCount);
            return updatedProduct;
        } else {
            console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
async function testAggregation() {
    try {
        console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏...');
        
        const stats = await Product.aggregate([
            {
                $group: {
                    _id: '$vendor.title',
                    totalProducts: { $sum: 1 },
                    avgPrice: { $avg: '$currentPrice' },
                    totalOffers: { $sum: '$offerCount' }
                }
            },
            { $sort: { totalProducts: -1 } }
        ]);
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º:');
        stats.forEach(stat => {
            console.log(`   ${stat._id}: ${stat.totalProducts} —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(stat.avgPrice)} –≥—Ä–Ω`);
        });
        
        return stats;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
async function testTextSearch() {
    try {
        console.log('\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
        
        const products = await Product.find({
            $or: [
                { title: { $regex: '—Ç–µ—Å—Ç', $options: 'i' } },
                { 'vendor.title': { $regex: '—Ç–µ—Å—Ç', $options: 'i' } }
            ]
        }).limit(5);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å "—Ç–µ—Å—Ç":`);
        products.forEach(product => {
            console.log(`   - ${product.title} (${product.vendor.title})`);
        });
        
        return products;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
        return null;
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData(productId) {
    try {
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        const deletedProduct = await Product.findOneAndDelete({ id: productId });
        if (deletedProduct) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω:', deletedProduct.title);
        } else {
            console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    try {
        await connectToDatabase();
        
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        const testProduct = await testCreateProduct();
        if (!testProduct) {
            console.log('‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
            return;
        }
        
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        await testFindProduct(testProduct.id);
        
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await testCategorySearch();

        // –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await testCategoryAggregation();
        
        // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await testUpdateProduct(testProduct.id);
        
        // –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        await testAggregation();
        
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await testCategorySearch();

        // –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await testCategoryAggregation();
        
        // –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await testTextSearch();
        
        // –û—á–∏—Å—Ç–∫–∞
        await cleanupTestData(testProduct.id);
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
    } finally {
        await mongoose.connection.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests();
}

module.exports = {
    connectToDatabase,
    testCreateProduct,
    testFindProduct,
    testUpdateProduct,
    testAggregation,
    testTextSearch,
    testCategorySearch,
    testCategoryAggregation,
    cleanupTestData
}; 