#!/usr/bin/env node

const inquirer = require('inquirer');
const chalk = require('chalk');

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ora –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let ora = require('ora');
if (typeof ora !== 'function' && ora.default) ora = ora.default;

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç figlet –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let figlet = require('figlet');
if (typeof figlet !== 'function' && figlet.default) figlet = figlet.default;

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç boxen –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let boxen = require('boxen');
if (typeof boxen !== 'function' && boxen.default) boxen = boxen.default;

const cliProgress = require('cli-progress');
const HotlineParser = require('./hotline-parser');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é chalk –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
if (chalk.level > 0) {
    // chalk v4+ (CommonJS)
    chalk.level = 3; // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞
} else {
    // chalk v5+ (ESM) - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chalk v4: npm install chalk@4.1.2');
}

class HotlineCLI {
    constructor() {
        this.parser = new HotlineParser();
        this.config = {
            batchSize: 15,
            autoGetTokens: true,
            saveProgressively: true,
            saveInterval: 25,
            testPerformance: false,
            maxBatchSize: 25
        };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    showHeader() {
        console.clear();
        console.log(
            chalk.cyan(
                figlet.textSync('Hotline Parser', { 
                    horizontalLayout: 'full',
                    font: 'Standard'
                })
            )
        );
        
        console.log(
            boxen(
                chalk.yellow('üöÄ –ú—É–ª—å—Ç–∏–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Hotline.ua —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π'),
                {
                    padding: 1,
                    margin: 1,
                    borderStyle: 'round',
                    borderColor: 'cyan'
                }
            )
        );
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async showMainMenu() {
        const { action } = await inquirer.prompt([
            {
                type: 'list',
                name: 'action',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                choices: [
                    { name: 'üì¶ –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞', value: 'parse_all' },
                    { name: 'üéØ –ü–∞—Ä—Å–∏—Ç—å –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', value: 'parse_single' },
                    { name: '‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏', value: 'settings' },
                    { name: 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', value: 'test_performance' },
                    { name: 'üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤', value: 'test_tokens' },
                    { name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã', value: 'reports' },
                    { name: '‚ùå –í—ã—Ö–æ–¥', value: 'exit' }
                ]
            }
        ]);

        switch (action) {
            case 'parse_all':
                await this.parseAllCategories();
                break;
            case 'parse_single':
                await this.parseSingleCategory();
                break;
            case 'settings':
                await this.showSettings();
                break;
            case 'test_performance':
                await this.testPerformance();
                break;
            case 'test_tokens':
                await this.testTokens();
                break;
            case 'reports':
                await this.showReports();
                break;
            case 'exit':
                this.exit();
                break;
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    async parseAllCategories() {
        this.showHeader();
        console.log(chalk.blue('üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞'));
        console.log('');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const fs = require('fs').promises;
            let categories;
            
            try {
                const content = await fs.readFile('tctgr/categories.txt', 'utf8');
                categories = content
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0 && !line.startsWith('#'))
                    .filter(line => line.includes('hotline.ua'));
            } catch (error) {
                console.log(chalk.red('‚ùå –§–∞–π–ª categories.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!'));
                console.log(chalk.yellow('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª categories.txt —Å URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)'));
                await this.waitForEnter();
                return;
            }

            if (categories.length === 0) {
                console.log(chalk.red('‚ùå –í —Ñ–∞–π–ª–µ categories.txt –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL!'));
                await this.waitForEnter();
                return;
            }

            console.log(chalk.green(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`));
            categories.forEach((url, index) => {
                const categoryName = this.parser.extractPathFromUrl(url);
                console.log(chalk.cyan(`   ${index + 1}. ${categoryName}`));
            });

            console.log('');
            const { confirm } = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'confirm',
                    message: '–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π?',
                    default: true
                }
            ]);

            if (!confirm) {
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const spinner = ora('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...').start();
            
            const results = await this.parser.parseAllCategories(
                categories, 
                this.config.saveProgressively, 
                this.config.batchSize, 
                this.config.autoGetTokens
            );

            spinner.succeed('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showParseResults(results);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async parseSingleCategory() {
        this.showHeader();
        console.log(chalk.blue('üéØ –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'));
        console.log('');

        const { categoryUrl } = await inquirer.prompt([
            {
                type: 'input',
                name: 'categoryUrl',
                message: '–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
                default: 'https://hotline.ua/mobile/mobilnye-telefony-i-smartfony/',
                validate: (input) => {
                    if (!input.includes('hotline.ua')) {
                        return 'URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å hotline.ua';
                    }
                    return true;
                }
            }
        ]);

        try {
            const spinner = ora('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...').start();
            
            const products = await this.parser.getAllProducts(
                this.config.saveProgressively,
                this.config.saveInterval,
                this.config.batchSize,
                categoryUrl
            );

            spinner.succeed(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.showProductStats(products);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    async showSettings() {
        this.showHeader();
        console.log(chalk.blue('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞'));
        console.log('');

        const { setting } = await inquirer.prompt([
            {
                type: 'list',
                name: 'setting',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
                choices: [
                    { name: `üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${this.config.batchSize}`, value: 'batch_size' },
                    { name: `üîë –ê–≤—Ç–æ–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${this.config.autoGetTokens ? '–í–ö–õ' : '–í–´–ö–õ'}`, value: 'auto_tokens' },
                    { name: `üíæ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${this.config.saveProgressively ? '–í–ö–õ' : '–í–´–ö–õ'}`, value: 'save_progressive' },
                    { name: `‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${this.config.saveInterval}`, value: 'save_interval' },
                    { name: `üß™ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: ${this.config.maxBatchSize}`, value: 'max_batch' },
                    { name: 'üîô –ù–∞–∑–∞–¥', value: 'back' }
                ]
            }
        ]);

        switch (setting) {
            case 'batch_size':
                await this.changeBatchSize();
                break;
            case 'auto_tokens':
                await this.toggleAutoTokens();
                break;
            case 'save_progressive':
                await this.toggleSaveProgressive();
                break;
            case 'save_interval':
                await this.changeSaveInterval();
                break;
            case 'max_batch':
                await this.changeMaxBatchSize();
                break;
            case 'back':
                return;
        }

        await this.showSettings();
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
    async changeBatchSize() {
        const { batchSize } = await inquirer.prompt([
            {
                type: 'number',
                name: 'batchSize',
                message: '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (5-50):',
                default: this.config.batchSize,
                validate: (input) => {
                    if (input < 1 || input > 50) {
                        return '–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50';
                    }
                    return true;
                }
            }
        ]);

        this.config.batchSize = batchSize;
        console.log(chalk.green(`‚úÖ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${batchSize}`));
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    async toggleAutoTokens() {
        const { autoTokens } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'autoTokens',
                message: '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?',
                default: this.config.autoGetTokens
            }
        ]);

        this.config.autoGetTokens = autoTokens;
        console.log(chalk.green(`‚úÖ –ê–≤—Ç–æ–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${autoTokens ? '–í–ö–õ' : '–í–´–ö–õ'}`));
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async toggleSaveProgressive() {
        const { saveProgressive } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'saveProgressive',
                message: '–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö?',
                default: this.config.saveProgressively
            }
        ]);

        this.config.saveProgressively = saveProgressive;
        console.log(chalk.green(`‚úÖ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${saveProgressive ? '–í–ö–õ' : '–í–´–ö–õ'}`));
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async changeSaveInterval() {
        const { saveInterval } = await inquirer.prompt([
            {
                type: 'number',
                name: 'saveInterval',
                message: '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü):',
                default: this.config.saveInterval,
                validate: (input) => {
                    if (input < 1) {
                        return '–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
                    }
                    return true;
                }
            }
        ]);

        this.config.saveInterval = saveInterval;
        console.log(chalk.green(`‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${saveInterval}`));
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    async changeMaxBatchSize() {
        const { maxBatchSize } = await inquirer.prompt([
            {
                type: 'number',
                name: 'maxBatchSize',
                message: '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (5-50):',
                default: this.config.maxBatchSize,
                validate: (input) => {
                    if (input < 5 || input > 50) {
                        return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 50';
                    }
                    return true;
                }
            }
        ]);

        this.config.maxBatchSize = maxBatchSize;
        console.log(chalk.green(`‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${maxBatchSize}`));
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    async testPerformance() {
        this.showHeader();
        console.log(chalk.blue('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'));
        console.log('');

        const { confirm } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'confirm',
                message: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±–∞—Ç—á–µ–π?',
                default: true
            }
        ]);

        if (!confirm) {
            return;
        }

        try {
            const spinner = ora('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...').start();
            
            const results = await this.parser.testBatchPerformance(this.config.maxBatchSize);
            
            spinner.succeed('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showPerformanceResults(results);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    async testTokens() {
        this.showHeader();
        console.log(chalk.blue('üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤'));
        console.log('');

        const { confirm } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'confirm',
                message: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π?',
                default: true
            }
        ]);

        if (!confirm) {
            return;
        }

        try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            const testTokens = require('./test-tokens');
            await testTokens();

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–æ–≤
    async showReports() {
        this.showHeader();
        console.log(chalk.blue('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã'));
        console.log('');

        const fs = require('fs').promises;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
            const jsonFiles = await this.getFilesInDirectory('JSON');
            const csvFiles = await this.getFilesInDirectory('CSV');

            console.log(chalk.green('üìÅ JSON —Ñ–∞–π–ª—ã:'));
            if (jsonFiles.length > 0) {
                jsonFiles.forEach(file => {
                    console.log(chalk.cyan(`   üìÑ ${file}`));
                });
            } else {
                console.log(chalk.yellow('   –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤'));
            }

            console.log('');
            console.log(chalk.green('üìÅ CSV —Ñ–∞–π–ª—ã:'));
            if (csvFiles.length > 0) {
                csvFiles.forEach(file => {
                    console.log(chalk.cyan(`   üìä ${file}`));
                });
            } else {
                console.log(chalk.yellow('   –ù–µ—Ç CSV —Ñ–∞–π–ª–æ–≤'));
            }

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    async getFilesInDirectory(dir) {
        try {
            const fs = require('fs').promises;
            const files = await fs.readdir(dir);
            return files.filter(file => file.endsWith('.json') || file.endsWith('.csv'));
        } catch (error) {
            return [];
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
    showParseResults(results) {
        console.log('');
        console.log(chalk.green('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:'));
        console.log('');

        let totalProducts = 0;
        let successCount = 0;
        let errorCount = 0;

        Object.keys(results).forEach(categoryName => {
            const result = results[categoryName];
            if (result.error) {
                console.log(chalk.red(`‚ùå ${categoryName}: ${result.error}`));
                errorCount++;
            } else {
                console.log(chalk.green(`‚úÖ ${categoryName}: ${result.count} —Ç–æ–≤–∞—Ä–æ–≤`));
                totalProducts += result.count;
                successCount++;
            }
        });

        console.log('');
        console.log(chalk.blue('üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'));
        console.log(chalk.cyan(`   –£—Å–ø–µ—à–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${successCount}`));
        console.log(chalk.red(`   –û—à–∏–±–æ–∫: ${errorCount}`));
        console.log(chalk.green(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`));
    }

    // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    showProductStats(products) {
        console.log('');
        console.log(chalk.blue('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:'));
        console.log(chalk.cyan(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`));
        
        if (products.length > 0) {
            const prices = products.filter(p => p.minPrice).map(p => p.minPrice);
            if (prices.length > 0) {
                const minPrice = Math.min(...prices);
                const maxPrice = Math.max(...prices);
                const avgPrice = Math.round(prices.reduce((a, b) => a + b, 0) / prices.length);
                
                console.log(chalk.cyan(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice} –≥—Ä–Ω`));
                console.log(chalk.cyan(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${maxPrice} –≥—Ä–Ω`));
                console.log(chalk.cyan(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avgPrice} –≥—Ä–Ω`));
            }
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    showPerformanceResults(results) {
        console.log('');
        console.log(chalk.green('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:'));
        console.log('');

        results.results.forEach(result => {
            const color = result.speed > 10 ? chalk.green : result.speed > 5 ? chalk.yellow : chalk.red;
            console.log(color(`   –ë–∞—Ç—á ${result.batchSize}: ${result.duration.toFixed(2)}—Å, ${result.productsCount} —Ç–æ–≤–∞—Ä–æ–≤, ${result.speed.toFixed(1)} —Ç–æ–≤–∞—Ä–æ–≤/—Å`));
        });

        console.log('');
        console.log(chalk.blue(`üèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${results.optimal.batchSize} (${results.optimal.speed.toFixed(1)} —Ç–æ–≤–∞—Ä–æ–≤/—Å)`));
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è Enter
    async waitForEnter() {
        await inquirer.prompt([
            {
                type: 'input',
                name: 'enter',
                message: '–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'
            }
        ]);
    }

    // –í—ã—Ö–æ–¥
    exit() {
        console.log(chalk.cyan('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'));
        process.exit(0);
    }

    // –ó–∞–ø—É—Å–∫ CLI
    async run() {
        while (true) {
            this.showHeader();
            await this.showMainMenu();
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º CLI
if (require.main === module) {
    const cli = new HotlineCLI();
    cli.run().catch(console.error);
}

module.exports = HotlineCLI; 