const mongoose = require('mongoose');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

const Category = require('../models/Category');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function createSlug(text) {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/[\s_-]+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/^-+|-+$/g, ''); // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
function formatGroupName(fileName) {
  const groupNames = {
    'adult': '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö',
    'auto': '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
    'av': '–ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ',
    'bt': '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    'computer': '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏',
    'dacha_sad': '–î–∞—á–∞ –∏ —Å–∞–¥',
    'deti': '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã',
    'dom': '–î–æ–º –∏ –±—ã—Ç',
    'fashion': '–ú–æ–¥–∞ –∏ —Å—Ç–∏–ª—å',
    'krasota': '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
    'military': '–í–æ–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã',
    'mobile': '–ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã',
    'musical_instruments': '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    'pobutova_himiia': '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è',
    'remont': '–†–µ–º–æ–Ω—Ç –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
    'sport': '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö',
    'tools': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    'zootovary': '–ó–æ–æ—Ç–æ–≤–∞—Ä—ã'
  };

  return groupNames[fileName] || fileName;
}

async function loadCategories() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/bifo';
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');

    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await Category.deleteMany({});
    console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

    const categoriesDir = path.join(__dirname, '../categories');
    const files = await fs.readdir(categoriesDir);
    
    let totalCategories = 0;
    let order = 0;

    for (const file of files) {
      if (!file.endsWith('.txt')) continue;

      const groupKey = file.replace('.txt', '');
      const groupName = formatGroupName(groupKey);
      const filePath = path.join(categoriesDir, file);
      
      console.log(`üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: ${groupName} (${file})`);

      try {
        const content = await fs.readFile(filePath, 'utf8');
        const categories = content
          .split('\n')
          .map(line => line.trim())
          .filter(line => line.length > 0);

        for (const categoryName of categories) {
          const slug = createSlug(categoryName);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ slug –Ω–µ –ø—É—Å—Ç–æ–π
          if (!slug) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø—É—Å—Ç—ã–º slug: "${categoryName}"`);
            continue;
          }

          try {
            const category = new Category({
              name: categoryName,
              slug: slug,
              group: groupName,
              order: order++
            });

            await category.save();
            totalCategories++;
          } catch (saveError) {
            if (saveError.code === 11000) {
              console.log(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω: ${categoryName}`);
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}":`, saveError.message);
            }
          }
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã "${groupName}"`);
      } catch (fileError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, fileError.message);
      }
    }

    console.log(`\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º
    const groupStats = await Category.aggregate([
      {
        $group: {
          _id: '$group',
          count: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º:');
    groupStats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üì§ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  loadCategories().catch(console.error);
}

module.exports = { loadCategories }; 