const mongoose = require('mongoose');
const Product = require('../models/Product');
const Catalog = require('../models/Catalog');
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('‚úÖ Connected to MongoDB'))
    .catch(err => console.error('‚ùå MongoDB connection error:', err));

// Mapping of existing sections to catalog names
const sectionToCatalogMapping = {
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': 'electronics',
    '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã': 'electronics',
    '–¢–µ–ª–µ—Ñ–æ–Ω—ã': 'electronics',
    '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã': 'electronics',
    '–ù–æ—É—Ç–±—É–∫–∏': 'electronics',
    '–ü–ª–∞–Ω—à–µ—Ç—ã': 'electronics',
    '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã': 'electronics',
    
    '–û–¥–µ–∂–¥–∞': 'clothing',
    '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞': 'clothing',
    '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞': 'clothing',
    '–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞': 'clothing',
    '–û–±—É–≤—å': 'clothing',
    '–°—É–º–∫–∏': 'clothing',
    
    '–°–ø–æ—Ä—Ç': 'sport',
    '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã': 'sport',
    '–§–∏—Ç–Ω–µ—Å': 'sport',
    '–¢—Ä–µ–Ω–∞–∂–µ—Ä—ã': 'sport',
    
    '–î–æ–º': 'home',
    '–î–æ–º–∞—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã': 'home',
    '–ú–µ–±–µ–ª—å': 'home',
    '–î–µ–∫–æ—Ä': 'home',
    '–ö—É—Ö–Ω—è': 'home',
    
    '–ê–≤—Ç–æ': 'auto',
    '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã': 'auto',
    '–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏': 'auto',
    '–ê–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã': 'auto',
    
    '–ö—Ä–∞—Å–æ—Ç–∞': 'beauty',
    '–ö–æ—Å–º–µ—Ç–∏–∫–∞': 'beauty',
    '–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è': 'beauty',
    '–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π': 'beauty',
    
    '–ó–¥–æ—Ä–æ–≤—å–µ': 'health',
    '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': 'health',
    '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞': 'health',
    '–í–∏—Ç–∞–º–∏–Ω—ã': 'health',
    
    '–î–µ—Ç–∏': 'children',
    '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': 'children',
    '–ò–≥—Ä—É—à–∫–∏': 'children',
    '–î–µ—Ç—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ': 'children',
    
    '–°–∞–¥': 'garden',
    '–°–∞–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã': 'garden',
    '–†–∞—Å—Ç–µ–Ω–∏—è': 'garden',
    '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'garden',
    
    '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'tools',
    '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'tools',
    '–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'tools',
    '–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'tools',
    
    '–ö–Ω–∏–≥–∏': 'books',
    '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'books',
    '–£—á–µ–±–Ω–∏–∫–∏': 'books',
    
    '–ú—É–∑—ã–∫–∞': 'music',
    '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'music',
    '–ê—É–¥–∏–æ': 'music',
    
    '–ò–≥—Ä—ã': 'games',
    '–í–∏–¥–µ–æ–∏–≥—Ä—ã': 'games',
    '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã': 'games',
    
    '–í–æ–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ': 'military',
    '–¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ': 'military',
    '–ó–∞—â–∏—Ç–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ': 'military',
    
    '–ò–Ω—Ç–∏–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã': 'adult',
    '–°–µ–∫—Å-–∏–≥—Ä—É—à–∫–∏': 'adult',
    '–ò–Ω—Ç–∏–º–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞': 'adult'
};

async function analyzeProductSections() {
    try {
        console.log('üîç Analyzing product sections...');
        
        // Get all unique sections
        const sections = await Product.aggregate([
            { $group: { _id: '$section.name', count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ]);
        
        console.log('\nüìä Product sections found:');
        sections.forEach(section => {
            const catalogSlug = sectionToCatalogMapping[section._id] || 'unmapped';
            console.log(`  ${section._id}: ${section.count} products -> ${catalogSlug}`);
        });
        
        return sections;
    } catch (error) {
        console.error('Error analyzing sections:', error);
        return [];
    }
}

async function updateCatalogProductSearchFields() {
    try {
        console.log('\nüîÑ Updating catalog product search fields...');
        
        // Get all catalogs
        const catalogs = await Catalog.find({ isActive: true });
        
        for (const catalog of catalogs) {
            let searchFields = [];
            
            // Find sections that map to this catalog
            for (const [sectionName, catalogSlug] of Object.entries(sectionToCatalogMapping)) {
                if (catalogSlug === catalog.slug) {
                    searchFields.push(sectionName);
                }
            }
            
            if (searchFields.length > 0) {
                // Update catalog with search fields
                await Catalog.updateOne(
                    { _id: catalog._id },
                    { 
                        $set: { 
                            productSearchField: searchFields.join('|'),
                            searchQueries: searchFields
                        }
                    }
                );
                
                console.log(`  ‚úÖ Updated ${catalog.name}: ${searchFields.join(', ')}`);
            }
        }
        
        console.log('‚úÖ Catalog search fields updated successfully!');
    } catch (error) {
        console.error('Error updating catalogs:', error);
    }
}

async function getCatalogStats() {
    try {
        console.log('\nüìà Getting catalog statistics...');
        
        const catalogs = await Catalog.find({ level: 0, isActive: true });
        
        for (const catalog of catalogs) {
            const searchField = catalog.productSearchField || catalog.name;
            const count = await Product.countDocuments({ 
                'section.name': { $regex: searchField, $options: 'i' } 
            });
            
            console.log(`  ${catalog.name}: ${count} products`);
        }
    } catch (error) {
        console.error('Error getting stats:', error);
    }
}

async function createMissingCatalogs() {
    try {
        console.log('\nüîß Creating missing catalogs...');
        
        const existingCatalogs = await Catalog.find({ level: 0 });
        const existingSlugs = existingCatalogs.map(c => c.slug);
        
        const missingCatalogs = [];
        
        for (const [sectionName, catalogSlug] of Object.entries(sectionToCatalogMapping)) {
            if (!existingSlugs.includes(catalogSlug)) {
                missingCatalogs.push({
                    name: sectionName,
                    slug: catalogSlug,
                    description: `–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤: ${sectionName}`,
                    level: 0,
                    sortOrder: existingCatalogs.length + missingCatalogs.length,
                    isActive: true,
                    productSearchField: sectionName
                });
            }
        }
        
        if (missingCatalogs.length > 0) {
            await Catalog.insertMany(missingCatalogs);
            console.log(`  ‚úÖ Created ${missingCatalogs.length} missing catalogs`);
        } else {
            console.log('  ‚úÖ All catalogs already exist');
        }
    } catch (error) {
        console.error('Error creating catalogs:', error);
    }
}

async function main() {
    try {
        console.log('üöÄ Starting catalog mapping analysis...\n');
        
        // Analyze existing sections
        await analyzeProductSections();
        
        // Create missing catalogs
        await createMissingCatalogs();
        
        // Update catalog search fields
        await updateCatalogProductSearchFields();
        
        // Get final statistics
        await getCatalogStats();
        
        console.log('\n‚úÖ Catalog mapping completed successfully!');
        
    } catch (error) {
        console.error('‚ùå Error in main process:', error);
    } finally {
        mongoose.connection.close();
        console.log('üîå Database connection closed');
    }
}

// Run the script
if (require.main === module) {
    main();
}

module.exports = {
    analyzeProductSections,
    updateCatalogProductSearchFields,
    getCatalogStats,
    createMissingCatalogs
}; 