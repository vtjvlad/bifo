// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–ª–µ–º productSearchField
const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI)
.then(() => console.log('‚úÖ Connected to MongoDB'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
const Catalog = require('./models/Catalog');

async function updateCategories() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–ª–µ–º productSearchField...\n');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (level 2)
        const categories = await Catalog.find({ level: 2, isActive: true });
        console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${categories.length}`);

        let updatedCount = 0;
        let skippedCount = 0;

        for (const category of categories) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ productSearchField
            if (category.productSearchField) {
                console.log(`‚è≠Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" —É–∂–µ –∏–º–µ–µ—Ç productSearchField: ${category.productSearchField}`);
                skippedCount++;
                continue;
            }

            // –°–æ–∑–¥–∞–µ–º productSearchField –Ω–∞ –æ—Å–Ω–æ–≤–µ catalogSlug –∏ slug
            const productSearchField = `${category.catalogSlug}-${category.slug}`;
            
            try {
                await Catalog.findByIdAndUpdate(category._id, {
                    productSearchField: productSearchField
                });
                
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}": ${productSearchField}`);
                updatedCount++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}":`, error.message);
            }
        }

        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
        console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
        console.log(`   –í—Å–µ–≥–æ: ${categories.length}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
        const sampleCategories = await Catalog.find({ 
            level: 2, 
            productSearchField: { $exists: true, $ne: null } 
        }).limit(5);
        
        sampleCategories.forEach(cat => {
            console.log(`   ${cat.name}: ${cat.productSearchField}`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    mongoose.connection.close();
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updateCategories(); 