#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª—ã –≤ TXT
 * @param {string} directoryPath - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
function renameHtmlToTxt(directoryPath) {
    try {
        if (!fs.existsSync(directoryPath)) {
            console.error(`–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${directoryPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            process.exit(1);
        }

        const files = fs.readdirSync(directoryPath);
        const htmlFiles = files.filter(file => file.endsWith('.html'));
        
        if (htmlFiles.length === 0) {
            console.log('HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
            return;
        }

        console.log(`–ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è\n`);
        
        let successCount = 0;
        let errorCount = 0;
        
        htmlFiles.forEach((file, index) => {
            const oldPath = path.join(directoryPath, file);
            const newFileName = file.replace(/\.html$/, '.txt');
            const newPath = path.join(directoryPath, newFileName);
            
            try {
                fs.renameSync(oldPath, newPath);
                console.log(`‚úÖ ${index + 1}/${htmlFiles.length}: ${file} ‚Üí ${newFileName}`);
                successCount++;
            } catch (error) {
                console.error(`‚ùå ${index + 1}/${htmlFiles.length}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ ${file}: ${error.message}`);
                errorCount++;
            }
        });
        
        console.log('\n' + '‚îÄ'.repeat(50));
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
        console.log(`   –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${successCount}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error.message);
        process.exit(1);
    }
}

/**
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
 * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 */
function renameSingleFile(filePath) {
    try {
        if (!fs.existsSync(filePath)) {
            console.error(`–û—à–∏–±–∫–∞: —Ñ–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            process.exit(1);
        }

        if (!filePath.endsWith('.html')) {
            console.error('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .html');
            process.exit(1);
        }

        const directory = path.dirname(filePath);
        const fileName = path.basename(filePath);
        const newFileName = fileName.replace(/\.html$/, '.txt');
        const newPath = path.join(directory, newFileName);

        fs.renameSync(filePath, newPath);
        console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω:`);
        console.log(`   ${fileName} ‚Üí ${newFileName}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 0) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node rename_to_txt.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.html>');
    console.log('  node rename_to_txt.js --dir <–ø—É—Ç—å_–∫_–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏>');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node rename_to_txt.js catalogs/auto.html');
    console.log('  node rename_to_txt.js --dir catalogs/');
    process.exit(0);
}

if (args[0] === '--dir') {
    if (args.length < 2) {
        console.error('–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ --dir');
        process.exit(1);
    }
    renameHtmlToTxt(args[1]);
} else {
    renameSingleFile(args[0]);
} 