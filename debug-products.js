// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI)
.then(() => console.log('‚úÖ Connected to MongoDB'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Catalog = require('./models/Catalog');
const Product = require('./models/Product');

async function debugProducts() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        console.log('1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:');
        const totalProducts = await Product.countDocuments();
        console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${totalProducts}`);

        if (totalProducts === 0) {
            console.log('   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è section —É —Ç–æ–≤–∞—Ä–æ–≤
        console.log('\n2. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è section —É —Ç–æ–≤–∞—Ä–æ–≤:');
        const sampleProducts = await Product.find().limit(5);
        
        sampleProducts.forEach((product, index) => {
            console.log(`   –¢–æ–≤–∞—Ä ${index + 1}:`);
            console.log(`     ID: ${product.id}`);
            console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.title}`);
            console.log(`     Section:`, JSON.stringify(product.section, null, 4));
            console.log(`     Current Price: ${product.currentPrice}`);
            console.log('');
        });

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è section.id
        console.log('3. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è section.id:');
        const uniqueSections = await Product.distinct('section.id');
        console.log(`   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö section.id: ${uniqueSections.length}`);
        console.log('   –ü—Ä–∏–º–µ—Ä—ã section.id:', uniqueSections.slice(0, 10));

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
        console.log('\n4. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:');
        const catalogs = await Catalog.find({ isActive: true });
        console.log(`   –í—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: ${catalogs.length}`);

        const mainCatalogs = catalogs.filter(cat => cat.level === 0);
        const groups = catalogs.filter(cat => cat.level === 1 && cat.isGroup);
        const categories = catalogs.filter(cat => cat.level === 2);

        console.log(`   –û—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤: ${mainCatalogs.length}`);
        console.log(`   –ì—Ä—É–ø–ø: ${groups.length}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É section.id –∏ slug –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è section.id –∏ slug –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
        
        const categorySlugs = categories.map(cat => cat.slug);
        const sectionIds = uniqueSections;
        
        console.log(`   Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categorySlugs.slice(0, 10)}`);
        console.log(`   Section ID —Ç–æ–≤–∞—Ä–æ–≤: ${sectionIds.slice(0, 10)}`);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        const matchingSections = sectionIds.filter(sectionId => 
            categorySlugs.includes(sectionId)
        );
        
        console.log(`   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö section.id –∏ slug: ${matchingSections.length}`);
        console.log('   –°–æ–≤–ø–∞–¥–µ–Ω–∏—è:', matchingSections.slice(0, 10));

        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (matchingSections.length > 0) {
            console.log('\n6. –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
            const testCategorySlug = matchingSections[0];
            console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${testCategorySlug}`);
            
            const productsInCategory = await Product.find({ 'section.id': testCategorySlug });
            console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${testCategorySlug}: ${productsInCategory.length}`);
            
            if (productsInCategory.length > 0) {
                console.log('   –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:');
                const sampleProduct = productsInCategory[0];
                console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${sampleProduct.title}`);
                console.log(`     –¶–µ–Ω–∞: ${sampleProduct.currentPrice}`);
                console.log(`     Section:`, JSON.stringify(sampleProduct.section, null, 4));
            }
        }

        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ section
        console.log('\n7. –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä section:');
        const productsWithDifferentSection = await Product.find({
            $or: [
                { 'section.id': { $exists: false } },
                { 'section.id': null },
                { 'section.id': '' }
            ]
        }).limit(5);

        console.log(`   –¢–æ–≤–∞—Ä—ã –±–µ–∑ section.id: ${productsWithDifferentSection.length}`);
        
        if (productsWithDifferentSection.length > 0) {
            console.log('   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ section.id:');
            productsWithDifferentSection.forEach((product, index) => {
                console.log(`     ${index + 1}. ${product.title} - Section:`, JSON.stringify(product.section, null, 4));
            });
        }

        // 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\n8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        
        if (matchingSections.length === 0) {
            console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É section.id —Ç–æ–≤–∞—Ä–æ–≤ –∏ slug –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
            console.log('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–µ section –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤');
        } else {
            console.log('   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        if (totalProducts > 0 && matchingSections.length === 0) {
            console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏');
            console.log('   –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ section.id');
        }

        console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error.message);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    mongoose.connection.close();
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
debugProducts(); 