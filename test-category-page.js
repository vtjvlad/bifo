// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const express = require('express');
const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI)
.then(() => console.log('‚úÖ Connected to MongoDB'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Catalog = require('./models/Catalog');
const Product = require('./models/Product');

async function testCategoryPage() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤...');
        const catalogs = await Catalog.find({ isActive: true }).limit(5);
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: ${catalogs.length}`);
        
        if (catalogs.length > 0) {
            const mainCatalog = catalogs.find(cat => cat.level === 0);
            if (mainCatalog) {
                console.log(`   –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: ${mainCatalog.name} (${mainCatalog.slug})`);
                
                // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø
                console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø...');
                const groups = await Catalog.find({ 
                    catalogSlug: mainCatalog.slug, 
                    level: 1, 
                    isGroup: true,
                    isActive: true 
                }).limit(3);
                
                console.log(`   –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groups.length}`);
                
                if (groups.length > 0) {
                    const group = groups[0];
                    console.log(`   –ì—Ä—É–ø–ø–∞: ${group.name} (${group.slug})`);
                    
                    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
                    const categories = await Catalog.find({ 
                        groupSlug: group.slug, 
                        level: 2,
                        isActive: true 
                    }).limit(3);
                    
                    console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
                    
                    if (categories.length > 0) {
                        const category = categories[0];
                        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (${category.slug})`);
                        
                        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
                        console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
                        const products = await Product.find({ 
                            'section.id': category.slug 
                        }).limit(5);
                        
                        console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
                        
                        if (products.length > 0) {
                            console.log('   –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:');
                            console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${products[0].title}`);
                            console.log(`     –¶–µ–Ω–∞: ${products[0].currentPrice} ‚ÇΩ`);
                            console.log(`     –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ${products[0].vendor?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
                        }
                        
                        // 5. –¢–µ—Å—Ç API –º–∞—Ä—à—Ä—É—Ç–∞
                        console.log('\n5. –¢–µ—Å—Ç API –º–∞—Ä—à—Ä—É—Ç–∞...');
                        const testUrl = `/api/products/catalog/${mainCatalog.slug}/group/${group.slug}/category/${category.slug}`;
                        console.log(`   URL: ${testUrl}`);
                        console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: catalog=${mainCatalog.slug}, group=${group.slug}, category=${category.slug}`);
                        
                        // 6. –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        console.log('\n6. –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                        const pageUrl = `/category.html?catalog=${mainCatalog.slug}&group=${group.slug}&category=${category.slug}`;
                        console.log(`   URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageUrl}`);
                        
                        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
                        console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
                        console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
                        console.log('   2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:3000');
                        console.log('   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                        console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é');
                        console.log('   5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É');
                        
                    } else {
                        console.log('   ‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                } else {
                    console.log('   ‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }
            } else {
                console.log('   ‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } else {
            console.log('   ‚ùå –ö–∞—Ç–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    mongoose.connection.close();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testCategoryPage(); 