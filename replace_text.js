#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ú–∞—Å—Å–∏–≤ –∑–∞–º–µ–Ω: [—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã]
const replacements = [
    ['" class="m_b-10 navigation-block__title" data-v-23587d63><a href="', '\n___________'],
    ['</div></a></div></div></div><div class="navigation-block" data-v-23587d63 data-v-4c3420a9><div id="', '\n______________'],
    ['" class="text-x-lg col-xs-12" data-v-23587d63>', '___________'],
    ['<!----> <div class="blocks-container" data-v-4c3420a9><div class="navigation-block" data-v-23587d63 data-v-4c3420a9><div id="', '\n______________'],
    ['</a></div> <!----> <div class="catalog-links" data-v-23587d63><div class="section-navigation__item content" data-v-5a2f1b58 data-v-23587d63><a href="', ' '],
    ['" class="section-navigation__link link--black" data-v-5a2f1b58><img src=', '-----'],
    ['</div></a></div><div class="section-navigation__item content" data-v-5a2f1b58 data-v-23587d63><a href="', ' '],
    ['loading="lazy" data-v-5a2f1b58> <div class="section-navigation__link-text" data-v-5a2f1b58>', '-----'],
    ['', '']
];

/**
 * –ó–∞–º–µ–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ
 * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {string} outputPath - –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function replaceTextInFile(filePath, outputPath = null) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!fs.existsSync(filePath)) {
            console.error(`–û—à–∏–±–∫–∞: —Ñ–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            process.exit(1);
        }

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        let content = fs.readFileSync(filePath, 'utf8');
        
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
        replacements.forEach(([textToReplace, replacementText], index) => {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
            const matches = content.match(new RegExp(textToReplace.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'));
            const matchCount = matches ? matches.length : 0;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
            content = content.replace(new RegExp(textToReplace.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), replacementText);
            
            console.log(`–ó–∞–º–µ–Ω–∞ ${index + 1}:`);
            console.log(`  –ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π: ${matchCount}`);
            console.log(`  –ó–∞–º–µ–Ω–µ–Ω–æ "${textToReplace}" –Ω–∞ "${replacementText}"`);
            
            if (matchCount > 0) {
                console.log(`  –ü—Ä–∏–º–µ—Ä: "${textToReplace}" ‚Üí "${replacementText}"`);
            }
            console.log('');
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const targetPath = outputPath || filePath;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        fs.writeFileSync(targetPath, content, 'utf8');
        
        console.log(`‚úÖ –í—Å–µ –∑–∞–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${targetPath}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error.message);
        process.exit(1);
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param {string} directoryPath - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
function processDirectory(directoryPath) {
    try {
        if (!fs.existsSync(directoryPath)) {
            console.error(`–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${directoryPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            process.exit(1);
        }

        const files = fs.readdirSync(directoryPath);
        const htmlFiles = files.filter(file => file.endsWith('.html'));
        
        if (htmlFiles.length === 0) {
            console.log('HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
            return;
        }

        console.log(`–ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);
        
        htmlFiles.forEach((file, index) => {
            const filePath = path.join(directoryPath, file);
            console.log(`üìÅ –§–∞–π–ª ${index + 1}/${htmlFiles.length}: ${file}`);
            replaceTextInFile(filePath);
            console.log('‚îÄ'.repeat(50));
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error.message);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 0) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node replace_text.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [–ø—É—Ç—å_–¥–ª—è_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è]');
    console.log('  node replace_text.js --dir <–ø—É—Ç—å_–∫_–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏>');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node replace_text.js catalogs/categories/123.html');
    console.log('  node replace_text.js catalogs/categories/123.html output.html');
    console.log('  node replace_text.js --dir catalogs/categories/');
    console.log('');
    console.log('–í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∑–∞–º–µ–Ω—ã:');
    replacements.forEach(([textToReplace, replacementText], index) => {
        console.log(`${index + 1}. "${textToReplace}" ‚Üí "${replacementText}"`);
    });
    process.exit(0);
}

if (args[0] === '--dir') {
    if (args.length < 2) {
        console.error('–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ --dir');
        process.exit(1);
    }
    processDirectory(args[1]);
} else {
    const filePath = args[0];
    const outputPath = args[1] || null;
    replaceTextInFile(filePath, outputPath);
} 