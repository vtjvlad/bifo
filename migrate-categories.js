const mongoose = require('mongoose');
const Product = require('./models/Product');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectToDatabase() {
    try {
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/bifo', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ productCategoryName
function extractCategoryFromName(productCategoryName) {
    if (!productCategoryName) return null;
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    const normalized = productCategoryName.toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/g, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å bt- –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    return normalized.startsWith('bt-') ? normalized : `bt-${normalized}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ productCategoryName
function extractSubCategoryFromName(productCategoryName) {
    if (!productCategoryName) return null;
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    const normalized = productCategoryName.toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å bt- –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    return normalized.startsWith('bt-') ? normalized.substring(3) : normalized;
}

// –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π category –∏ subCategory
async function migrateProducts() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –ø–æ–ª–µ–π category –∏ subCategory
        const products = await Product.find({
            $or: [
                { 'section.category': { $exists: false } },
                { 'section.subCategory': { $exists: false } },
                { 'section.category': null },
                { 'section.subCategory': null }
            ]
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
        
        let updatedCount = 0;
        let errorCount = 0;
        
        for (const product of products) {
            try {
                const category = extractCategoryFromName(product.section.productCategoryName);
                const subCategory = extractSubCategoryFromName(product.section.productCategoryName);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                await Product.updateOne(
                    { _id: product._id },
                    {
                        $set: {
                            'section.category': category,
                            'section.subCategory': subCategory
                        }
                    }
                );
                
                updatedCount++;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ${product.title}: category=${category}, subCategory=${subCategory}`);
                
            } catch (error) {
                errorCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.title}:`, error.message);
            }
        }
        
        console.log(`\nüìà –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
        
        return { updatedCount, errorCount };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
        return { updatedCount: 0, errorCount: 1 };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
async function checkMigrationResults() {
    try {
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const totalProducts = await Product.countDocuments({});
        console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø–æ–ª—è–º–∏ category –∏ subCategory
        const productsWithCategories = await Product.countDocuments({
            'section.category': { $exists: true, $ne: null },
            'section.subCategory': { $exists: true, $ne: null }
        });
        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${productsWithCategories}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –ø–æ–ª–µ–π category –∏ subCategory
        const productsWithoutCategories = await Product.countDocuments({
            $or: [
                { 'section.category': { $exists: false } },
                { 'section.subCategory': { $exists: false } },
                { 'section.category': null },
                { 'section.subCategory': null }
            ]
        });
        console.log(`‚ùå –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${productsWithoutCategories}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const sampleProducts = await Product.find({
            'section.category': { $exists: true, $ne: null }
        }).limit(5);
        
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
        sampleProducts.forEach(product => {
            console.log(`   ${product.title}:`);
            console.log(`     - productCategoryName: ${product.section.productCategoryName}`);
            console.log(`     - category: ${product.section.category}`);
            console.log(`     - subCategory: ${product.section.subCategory}`);
        });
        
        return {
            totalProducts,
            productsWithCategories,
            productsWithoutCategories
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
async function createIndexes() {
    try {
        console.log('\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π...');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        await Product.collection.createIndex({ 'section.category': 1 });
        await Product.collection.createIndex({ 'section.subCategory': 1 });
        await Product.collection.createIndex({ 'section.category': 1, 'section.subCategory': 1 });
        
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function runMigration() {
    try {
        await connectToDatabase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏:');
        await checkMigrationResults();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        const migrationResult = await migrateProducts();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await createIndexes();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:');
        await checkMigrationResults();
        
        if (migrationResult.errorCount === 0) {
            console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    } finally {
        await mongoose.connection.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
    runMigration();
}

module.exports = {
    connectToDatabase,
    migrateProducts,
    checkMigrationResults,
    createIndexes,
    extractCategoryFromName,
    extractSubCategoryFromName
}; 